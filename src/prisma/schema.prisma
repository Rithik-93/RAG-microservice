// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  imageUrl       String?
  firstName      String?
  lastName       String?
  emailAddress   String          @unique
  credits        Int             @default(150)
  userToProject  UserToProject[]
  questionsAsked Question[]
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  githubUrl String

  deletedAt            DateTime?
  userToProject        UserToProject[]
  commits              Commit[]
  sourceCodeEmbeddings SourceCodeEmbedding[]
  savedQuestions       Question[]
  meetings             Meeting[]
}

model UserToProject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model Commit {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String

  project Project @relation(fields: [projectId], references: [id])

  commitMessage      String
  commitAuthorName   String
  commitHash         String
  commitAuthorAvatar String
  commitDate         DateTime

  summary String //from AI 
}

model SourceCodeEmbedding {
  id String @id @default(cuid())

  summaryEmbedding Unsupported("vector(768)")?
  sourceCode       String
  fileName         String
  summary          String

  projectId String
  project   Project @relation(fields: [projectId], references: [id])
}

model Meeting {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  meetingUrl String //firebase url

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  status MeetingStatus @default(PROCESSING)
  issues Issue[]
}

enum MeetingStatus {
  PROCESSING
  COMPLETED
}

model Issue {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  start    String
  end      String
  gist     String
  headline String
  summary  String

  meetingId String
  meeting   Meeting @relation(fields: [meetingId], references: [id])
}

model Question {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  question       String
  answer         String
  fileReferences Json? //I'm not sure, should review this

  userId    String
  user      User    @relation(fields: [userId], references: [id])
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
}
